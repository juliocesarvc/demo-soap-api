package com.demo_soap_api.openlegacy.services;

import java.util.Arrays;

import org.apache.commons.lang3.StringUtils;
import com.demo_soap_sdk.openlegacy.Add;
import com.demo_soap_sdk.openlegacy.AddAdd1;
import com.demo_soap_sdk.openlegacy.AddAddResponse;
import com.demo_soap_sdk.openlegacy.AddInputParams;
import com.demo_soap_sdk.openlegacy.AddOutputParams;
import org.openlegacy.core.rpc.RpcSession;
import org.openlegacy.core.rpc.actions.RpcActions;

import org.openlegacy.core.annotations.services.*;
import org.openlegacy.core.annotations.OpenlegacyDesigntime;
import org.openlegacy.impl.services.ws.ServiceBinder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.context.ApplicationContext;
import org.openlegacy.utils.ActionUtil;

/**
 *  A service implementation which invokes OpenLegacy API, and returns a service output.
 *  The code below should be customize to perform a working scenario which goes through the relevant screens.
 *  Can be tested by invoking the test SumaServiceTest.
 *  The interface SumaService can be customized to enabling passing parameters to the service, and this class can consume the parameters within the relevant screens.
 */
@Service(name = "Suma")
@OpenlegacyDesigntime(editor = "WebServiceEditor")
@Component
public class SumaServiceImpl implements SumaService {

    @Autowired
    private ApplicationContext applicationContext;


    @Autowired
    private ServiceBinder serviceBinder;

    @Override
    @ServiceMethod(name = "getSuma", entities = {
            @EntityMapping(alias="add", entity=com.demo_soap_sdk.openlegacy.Add.class)})
    @LogServiceUsage
    @BindInputs(endpoints = {
            @BindTo(endpoint = "add.inputParams.add", expression = "add")})
    @BindOutputs(endpoints = {
            @BindFrom(endpoint = "addResult", expression = "add.outputParams.addResponse.addResult")})
    public SumaOut getSuma(SumaIn sumaIn) throws Exception {
    	
    	System.out.println("serviceBinder.getClass(): " + serviceBinder.getClass());
    	
    	Arrays.asList(applicationContext.getBeanDefinitionNames())
    	.forEach( x -> System.out.println( "-->Bean: " + x ) );
    	
        SumaOut sumaOut = new SumaOut();
        /* autogenerated - sessions block start*/
        ;
        RpcSession demoSoapSdkSession = applicationContext.getBean("demoSoapSdkSession", RpcSession.class);
        /* autogenerated - sessions block end */
        ;

        try {
            /* autogenerated - execution block start */;
            Add add = serviceBinder.bindInputs(this, "getSuma", "add", new Add(), sumaIn);
            add = demoSoapSdkSession.doAction(ActionUtil.getRpcAction(Add.class), add);
            /* autogenerated - execution block end */;

            /* autogenerated - output block start */;
            sumaOut = serviceBinder.bindOutput(this, "getSuma", sumaOut, new String[]{"sumaIn", "add"}, sumaIn, add);
            /* autogenerated - output block end */;

            return sumaOut;
        } finally {
            /* autogenerated - disconnect block start */
            ;
            demoSoapSdkSession.disconnect();
            /* autogenerated - disconnect block end */
            ;
        }
    }

}
